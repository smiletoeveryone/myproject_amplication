/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateTravelingArgs } from "./CreateTravelingArgs";
import { UpdateTravelingArgs } from "./UpdateTravelingArgs";
import { DeleteTravelingArgs } from "./DeleteTravelingArgs";
import { TravelingCountArgs } from "./TravelingCountArgs";
import { TravelingFindManyArgs } from "./TravelingFindManyArgs";
import { TravelingFindUniqueArgs } from "./TravelingFindUniqueArgs";
import { Traveling } from "./Traveling";
import { TravelingService } from "../traveling.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Traveling)
export class TravelingResolverBase {
  constructor(
    protected readonly service: TravelingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Traveling",
    action: "read",
    possession: "any",
  })
  async _travelingsMeta(
    @graphql.Args() args: TravelingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Traveling])
  @nestAccessControl.UseRoles({
    resource: "Traveling",
    action: "read",
    possession: "any",
  })
  async travelings(
    @graphql.Args() args: TravelingFindManyArgs
  ): Promise<Traveling[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Traveling, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Traveling",
    action: "read",
    possession: "own",
  })
  async traveling(
    @graphql.Args() args: TravelingFindUniqueArgs
  ): Promise<Traveling | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Traveling)
  @nestAccessControl.UseRoles({
    resource: "Traveling",
    action: "create",
    possession: "any",
  })
  async createTraveling(
    @graphql.Args() args: CreateTravelingArgs
  ): Promise<Traveling> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Traveling)
  @nestAccessControl.UseRoles({
    resource: "Traveling",
    action: "update",
    possession: "any",
  })
  async updateTraveling(
    @graphql.Args() args: UpdateTravelingArgs
  ): Promise<Traveling | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Traveling)
  @nestAccessControl.UseRoles({
    resource: "Traveling",
    action: "delete",
    possession: "any",
  })
  async deleteTraveling(
    @graphql.Args() args: DeleteTravelingArgs
  ): Promise<Traveling | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
